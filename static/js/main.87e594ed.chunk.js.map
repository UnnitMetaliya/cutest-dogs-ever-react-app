{"version":3,"sources":["components/DogRandomizer.js","App.js","serviceWorker.js","index.js"],"names":["DogRandomizer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","fetch","then","response","json","responseJson","setState","breedList","message","console","log","state","catch","error","_this2","react_default","a","createElement","className","Button_default","variant","color","onClick","src","alt","height","width","Component","App","components_DogRandomizer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uMA4DeA,qBAvDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAmBFI,YAAc,WAEZC,MADY,2CAETC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJZ,EAAKa,SAAS,CAAEC,UAAWF,EAAaG,UACxCC,QAAQC,IAAIjB,EAAKkB,MAAMJ,aAExBK,MAAM,SAAAC,GACLJ,QAAQC,IAAIG,MA3BhBpB,EAAKkB,MAAQ,CACXJ,UAAW,IAHDd,mFAOM,IAAAqB,EAAAlB,KAElBK,MADY,2CAETC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJS,EAAKR,SAAS,CAAEC,UAAWF,EAAaG,UACxCC,QAAQC,IAAII,EAAKH,MAAMJ,aAExBK,MAAM,SAAAC,GACLJ,QAAQC,IAAIG,sCAkBhB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,QAAQ,SAASC,MAAM,YAAYC,QAAS1B,KAAKI,aAAzD,0BAKAe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEM,IAAK3B,KAAKe,MAAMJ,UAChBiB,IAAI,cACJC,OAAO,MACPC,MAAM,iBAhDUC,cCObC,MARf,WACE,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACY,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.87e594ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"../styles/global.css\";\r\n\r\nclass DogRandomizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      breedList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"https://dog.ceo/api/breeds/image/random\";\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ breedList: responseJson.message });\r\n        console.log(this.state.breedList);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  handleClick = () => {\r\n    const url = \"https://dog.ceo/api/breeds/image/random\";\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ breedList: responseJson.message });\r\n        console.log(this.state.breedList);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dd-wrapper\">\r\n        {/* <h1>Select Your Favorite Breed:</h1> */}\r\n        <Button variant=\"raised\" color=\"secondary\" onClick={this.handleClick}>\r\n          Fetch Random Good Boi!\r\n        </Button>\r\n\r\n        {/* <Select className=\"dd-options\" options={this.state.breed} /> */}\r\n        <div className=\"dog-image\">\r\n          <img\r\n            src={this.state.breedList}\r\n            alt=\"Smiley face\"\r\n            height=\"500\"\r\n            width=\"500\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DogRandomizer;\r\n","import React from \"react\";\r\nimport DogRandomizer from \"./components/DogRandomizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DogRandomizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}